# -*- coding: utf-8 -*-
"""Tic Tac Toe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qrKg9y3fl3tZyXS7LITNTsIDcp9TiDxM
"""

import pandas as pd
from IPython.display import clear_output

""" initial variables, they will form the frame to play, user will indicate
 row and column where they want to add the symbol """
rows=[["   ","   ","   "],["   ","   ","   "],["   ","   ","   "]]
line="-"*11

symbol=" X "

#change symbol at every turn function
def change_symbol(symbol):
  if symbol==" O ":
    symbol=" X "
  else:
    symbol=" O "
  print(f'Now is the turn of{symbol[:-1]}:')
  return symbol

#check is someone won and finish the game
def check_win(symbol):
  #check if same symbol in same row
  for row in rows:
    if row[0]==row[1]==row[2]!="   ":
      print(f"The winner is {row[0]}")
      return print("Game over")
  #check if same symbol in same column
  for i in range(3):
    if rows[0][i]==rows[1][i]==rows[2][i]!="   ":
      print(f"The winner is {rows[0][0]}")
      return print("Game over")
  #check if same symbol in same diagonal
  if rows[0][0]==rows[1][1]==rows[2][2]!="   ":
    print(f"The winner is {rows[1][1]}")
    return print("Game over")
  elif rows[0][2]==rows[1][1]==rows[2][0]!="   ":
    print(f"The winner is {rows[1][1]}")
    return print("Game over")
  #check for draw
  all_symbols=[]
  for row in rows:
    for i in row:
      all_symbols.append(i)
  if "   " not in all_symbols:
    print("It's a draw")
    return print("Game over")
  #game is not yet finished, call again get input to continue
  get_input(change_symbol(symbol))

#print the gameboard
def print_lines(symbol):
  for row in rows[:-1]:
    for i in row[:-1]:
      print(i,end="|")
    print(row[-1])
    print(line)
  for i in rows[2][:-1]:
    print(i,end="|")
  print(rows[2][-1])
  check_win(symbol)

#add the symbol
def insert_symbol(r_in, c_in, symbol):
  if rows[r_in][c_in]!="   ":
      print("This position is already taken, try again")
      get_input(symbol)
  else:
      rows[r_in][c_in]=symbol
  print_lines(symbol)

#collect input from user
def get_input(symbol):
  r_in=int(input("Type a row number(1 is the top row, 2 the middle, 3 the bottom): "))-1
  c_in=int(input("Type a column number(1 is left, 2 central, 3 right): "))-1
  #validate input
  if r_in not in range(3) or c_in not in range(3):
    print(f"Invalid input, I accept only 1 or 2 or 3. You wrote first {r_in+1} and then {c_in+1}. Try again")
    get_input(symbol)
  clear_output()
  insert_symbol(r_in, c_in, symbol)

get_input(symbol)